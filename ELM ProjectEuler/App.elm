module App exposing (..)

import Dict
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput)
import Random


-- MODEL


solutions =
    [ ( 1
      , "233168"
      , div
            []
            [ div [] [ "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23." |> text ]
            , div [] [ "------" |> text ]
            , div [] [ "Find the sum of all the multiples of 3 or 5, from 1 to 999" |> text ]
            ]
      )
    , ( 2
      , "4613732"
      , div
            []
            [ div [] [ "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:" |> text ]
            , div [] [ "------" |> text ]
            , div [] [ "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ..." |> text ]
            , div [] [ "------" |> text ]
            , div [] [ "Find the sum of all EVEN-valued Fibonacci numbers LESS THAN four million." |> text ]
            ]
      )
    , ( 3
      , "6857"
      , div []
            [ div [] [ "The largest prime factors of 13195 are 5, 7, 13, 29" |> text ]
            , div [] [ "------" |> text ]
            , div [] [ "What is the largest prime factor of the number 600851475143?" |> text ]
            ]
      )
    ]
        |> List.map (\( x, y, z ) -> ( x, ( y, z ) ))
        |> Dict.fromList


type alias Model =
    { userInput : String
    , question : Int
    , correct : Maybe Bool
    , userQuestionSelection : String
    , cannotChangeQuestion : String
    }


init : ( Model, Cmd Msg )
init =
    let
        initialModel =
            { userInput = ""
            , question = 1
            , correct = Nothing
            , userQuestionSelection = ""
            , cannotChangeQuestion = ""
            }
    in
    ( initialModel, Cmd.none )



-- MESSAGES


type Msg
    = UpdateInput String
    | UpdateQuestionInput String
    | ChangeQuestion
    | CheckAnswer


calculateStyle =
    style
        [ ( "background-color", "grey" )
        , ( "border", "none" )
        , ( "color", "white" )
        , ( "border-radius", "4px" )
        , ( "padding", "10px 20px" )
        , ( "text-align", "center" )
        , ( "text-decoration", "none" )
        , ( "font-size", "20px" )
        ]


backgroundStyle =
    style
        [ ( "backgroundColor", "AliceBlue" )
        , ( "text-align", "center" )
        , ( "padding", "10px 0px" )
        , ( "width", "70%" )
        , ( "margin-left", "15%" )
        , ( "margin-right", "15%" )
        ]


tableStyle =
    style
        [ ( "width", "70%" )
        , ( "margin-left", "15%" )
        , ( "margin-right", "15%" )
        ]



-- VIEW


getQuestion i =
    solutions
        |> Dict.get i
        |> Maybe.map Tuple.second
        |> Maybe.withDefault (div [] [])


view : Model -> Html Msg
view model =
    div [ backgroundStyle ]
        [ div [] [ "QUESTION " ++ toString model.question |> text ]

        {--
        , div []
            [ List.range 1 50
                |> List.scanl (\_ ( x, y ) -> ( y, x + y )) ( 1, 2 )
                |> List.map Tuple.first
                |> List.filter (\x -> x < 4000000)
                |> List.filter (\x -> x % 2 == 0)
                |> List.sum
                |> toString
                |> text
            ]
            --}
        , div []
            [ "Change To Question: " |> text
            , input [ type_ "text", onInput UpdateQuestionInput ] []
            , button [ onClick ChangeQuestion ] [ text "Change Question" ]
            ]
        , div [] [ model.cannotChangeQuestion |> text ]
        , div [] [ "---------------------------------------------" |> text ]
        , div [] [ getQuestion model.question ]
        , div [] [ "------" |> text ]
        , div []
            [ "Answer: " |> text
            , input [ type_ "text", onInput UpdateInput ] []
            , button [ onClick CheckAnswer ] [ text "Submit Answer" ]
            ]
        , div []
            [ (case model.correct of
                Just True ->
                    "Correct!"

                Just False ->
                    "Wrong."

                Nothing ->
                    ""
              )
                |> text
            ]
        ]


(||>) : ( a, b ) -> (a -> b -> c) -> c
(||>) ( a, b ) f =
    f a b


(|||>) : ( a, b, c ) -> (a -> b -> c -> d) -> d
(|||>) ( a, b, c ) f =
    f a b c



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    let
        newModel =
            case msg of
                UpdateInput userInput ->
                    { model
                        | userInput = userInput
                        , correct = Nothing
                    }

                UpdateQuestionInput userQuestionInput ->
                    { model
                        | userQuestionSelection = userQuestionInput
                    }

                ChangeQuestion ->
                    let
                        ( newQ, errorMessage ) =
                            case model.userQuestionSelection |> String.toInt of
                                Ok j ->
                                    case solutions |> Dict.get j of
                                        Just _ ->
                                            ( j, "" )

                                        Nothing ->
                                            ( model.question, "Question not found." )

                                Err _ ->
                                    ( model.question, "Invalid question number." )
                    in
                    { model
                        | question = newQ
                        , cannotChangeQuestion = errorMessage
                    }

                CheckAnswer ->
                    { model
                        | correct =
                            solutions
                                |> Dict.get model.question
                                |> Maybe.map (\( sol, _ ) -> sol == model.userInput)
                                |> Maybe.withDefault False
                                |> Just
                    }
    in
    ( newModel, Cmd.none )



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- MAIN


main : Program Never Model Msg
main =
    program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }
