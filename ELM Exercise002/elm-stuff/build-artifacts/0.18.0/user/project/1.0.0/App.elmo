var _user$project$App$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$App_ops = _user$project$App_ops || {};
_user$project$App_ops['||>'] = F2(
	function (_p0, f) {
		var _p1 = _p0;
		return A2(f, _p1._0, _p1._1);
	});
var _user$project$App$listmapi = F2(
	function (f, xList) {
		var xLength = _elm_lang$core$List$length(xList);
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, i) {
					return A2(f, i, x);
				}),
			xList,
			A2(_elm_lang$core$List$range, 0, xLength - 1));
	});
var _user$project$App$tableStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'width', _1: '70%'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '15%'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15%'},
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$App$backgroundStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: 'AliceBlue'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px 0px'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '70%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '15%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15%'},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$App$sellButtonStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#f44336'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '4px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px 20px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'none'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '20px'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$App$buyButtonStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#4CAF50'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '4px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px 20px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'none'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '20px'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$App$init = function () {
	var initialModel = {
		amount: 135,
		balance: 100000.0,
		convertedPrice: _elm_lang$core$Result$Err('No Input'),
		convertedQuantity: _elm_lang$core$Result$Err('No Input'),
		action: '',
		orders: {ctor: '[]'},
		warning: ''
	};
	return {ctor: '_Tuple2', _0: initialModel, _1: _elm_lang$core$Platform_Cmd$none};
}();
var _user$project$App$orderToString = function (order) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		function () {
			var _p2 = order.contract;
			if (_p2.ctor === 'Buy') {
				return 'Buy ';
			} else {
				return 'Sell ';
			}
		}(),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(order.quantity),
			A2(
				_elm_lang$core$Basics_ops['++'],
				' shares at $',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(order.price),
					' per share.'))));
};
var _user$project$App$Order = F3(
	function (a, b, c) {
		return {contract: a, price: b, quantity: c};
	});
var _user$project$App$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {amount: a, balance: b, convertedPrice: c, convertedQuantity: d, action: e, orders: f, warning: g};
	});
var _user$project$App$Sell = {ctor: 'Sell'};
var _user$project$App$Buy = {ctor: 'Buy'};
var _user$project$App$update = F2(
	function (msg, model) {
		return function (newModel) {
			return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
		}(
			function () {
				var _p3 = msg;
				switch (_p3.ctor) {
					case 'BuyStock':
						return function (match) {
							var _p4 = match;
							if (_p4.ctor === 'Err') {
								return _elm_lang$core$Native_Utils.update(
									model,
									{warning: _p4._0});
							} else {
								return _p4._0;
							}
						}(
							A2(
								_user$project$App_ops['||>'],
								{ctor: '_Tuple2', _0: model.convertedPrice, _1: model.convertedQuantity},
								_elm_lang$core$Result$map2(
									F2(
										function (price, quantity) {
											var order = {contract: _user$project$App$Buy, price: price, quantity: quantity};
											return _elm_lang$core$Native_Utils.update(
												model,
												{
													orders: A2(
														_elm_lang$core$Basics_ops['++'],
														model.orders,
														{
															ctor: '::',
															_0: order,
															_1: {ctor: '[]'}
														}),
													warning: ''
												});
										}))));
					case 'SellStock':
						return function (match) {
							var _p5 = match;
							if (_p5.ctor === 'Err') {
								return _elm_lang$core$Native_Utils.update(
									model,
									{warning: _p5._0});
							} else {
								return _p5._0;
							}
						}(
							A2(
								_user$project$App_ops['||>'],
								{ctor: '_Tuple2', _0: model.convertedPrice, _1: model.convertedQuantity},
								_elm_lang$core$Result$map2(
									F2(
										function (price, quantity) {
											var order = {contract: _user$project$App$Sell, price: price, quantity: quantity};
											return _elm_lang$core$Native_Utils.update(
												model,
												{
													orders: A2(
														_elm_lang$core$Basics_ops['++'],
														model.orders,
														{
															ctor: '::',
															_0: order,
															_1: {ctor: '[]'}
														}),
													warning: ''
												});
										}))));
					case 'SetPrice':
						var _p8 = _p3._0;
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								convertedPrice: A2(
									_elm_lang$core$Result$andThen,
									function (x) {
										return (_elm_lang$core$Native_Utils.cmp(x, 0.0) < 1) ? _elm_lang$core$Result$Err('Price must be positive.') : _elm_lang$core$Result$Ok(x);
									},
									function () {
										var _p6 = _p8;
										if (_p6 === '') {
											return _elm_lang$core$Result$Err('No Input');
										} else {
											return A2(
												_elm_lang$core$Result$mapError,
												function (_p7) {
													return 'Invalid Input';
												},
												_elm_lang$core$String$toFloat(_p8));
										}
									}())
							});
					case 'SetQuantity':
						var _p11 = _p3._0;
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								convertedQuantity: A2(
									_elm_lang$core$Result$andThen,
									function (x) {
										return (_elm_lang$core$Native_Utils.cmp(x, 0) < 1) ? _elm_lang$core$Result$Err('Quantity must be positive.') : _elm_lang$core$Result$Ok(x);
									},
									function () {
										var _p9 = _p11;
										if (_p9 === '') {
											return _elm_lang$core$Result$Err('No Input');
										} else {
											return A2(
												_elm_lang$core$Result$mapError,
												function (_p10) {
													return 'Invalid Input';
												},
												_elm_lang$core$String$toInt(_p11));
										}
									}())
							});
					default:
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								orders: A2(
									_elm_lang$core$List$map,
									function (tuple) {
										return _elm_lang$core$Tuple$second(tuple);
									},
									A2(
										_elm_lang$core$List$filter,
										function (tuple) {
											return A2(
												F2(
													function (x, y) {
														return !_elm_lang$core$Native_Utils.eq(x, y);
													}),
												_p3._0,
												_elm_lang$core$Tuple$first(tuple));
										},
										A2(
											_user$project$App$listmapi,
											F2(
												function (i, x) {
													return {ctor: '_Tuple2', _0: i, _1: x};
												}),
											model.orders)))
							});
				}
			}());
	});
var _user$project$App$DeleteOrder = function (a) {
	return {ctor: 'DeleteOrder', _0: a};
};
var _user$project$App$SetQuantity = function (a) {
	return {ctor: 'SetQuantity', _0: a};
};
var _user$project$App$SetPrice = function (a) {
	return {ctor: 'SetPrice', _0: a};
};
var _user$project$App$SellStock = {ctor: 'SellStock'};
var _user$project$App$BuyStock = {ctor: 'BuyStock'};
var _user$project$App$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$App$backgroundStyle,
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$App$BuyStock),
							_1: {
								ctor: '::',
								_0: _user$project$App$buyButtonStyle,
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Buy Stock'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$App$SellStock),
								_1: {
									ctor: '::',
									_0: _user$project$App$sellButtonStyle,
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Sell Stock'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$App$tableStyle,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$table,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$thead,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Field'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('User Input'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Validity'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tr,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Price'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$input,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$type_('text'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$placeholder('Price'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onInput(_user$project$App$SetPrice),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																function (temp) {
																	var _p12 = temp;
																	if (_p12.ctor === 'Err') {
																		return _p12._0;
																	} else {
																		return 'OK';
																	}
																}(model.convertedPrice)),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$tr,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Quantity'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$input,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$type_('text'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$placeholder('Quantity'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onInput(_user$project$App$SetQuantity),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	function (temp) {
																		var _p13 = temp;
																		if (_p13.ctor === 'Err') {
																			return _p13._0;
																		} else {
																			return 'OK';
																		}
																	}(model.convertedQuantity)),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$App$tableStyle,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$table,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$tr,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Remaining Stock'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	_elm_lang$core$Basics$toString(model.amount)),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$tr,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Remaining Balance'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'$',
																			_elm_lang$core$Basics$toString(model.balance))),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$tr,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Action Taken'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$td,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			_elm_lang$core$Basics$toString(model.action)),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									_elm_lang$core$Native_Utils.eq(model.warning, '') ? {ctor: '[]'} : {
										ctor: '::',
										_0: _elm_lang$html$Html$text(model.warning),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$App$tableStyle,
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: function (tableContent) {
												return A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _user$project$App$tableStyle,
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$table,
															{ctor: '[]'},
															tableContent),
														_1: {ctor: '[]'}
													});
											}(
												A2(
													F2(
														function (x, y) {
															return A2(_elm_lang$core$Basics_ops['++'], x, y);
														}),
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$thead,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Action'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Delete?'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													},
													A2(
														_user$project$App$listmapi,
														F2(
															function (i, x) {
																return A2(
																	_elm_lang$html$Html$tr,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$td,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(
																					_user$project$App$orderToString(x)),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$td,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$button,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(
																								_user$project$App$DeleteOrder(i)),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('X'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	});
															}),
														model.orders))),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$App$main = _elm_lang$html$Html$program(
	{init: _user$project$App$init, view: _user$project$App$view, update: _user$project$App$update, subscriptions: _user$project$App$subscriptions})();
